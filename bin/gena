#!/usr/bin/env ruby

# require 'gena'
require_relative '../lib/gena'


# Gena::Module.setup_command(Gena::Application)
# Gena::Fonts.setup_command(Gena::Application)

Gena::Module.setup_thor_commands(Gena::Application)

Gena::Application.start(ARGV)

exit

unless system "which xc-resave >> /dev/null"
  raise "\nPlease install xc-resave utility first. Run: \n\nbrew install alexgarbarev/core/xc-resave\n\n"
end

Gena::Config.create_if_needed

loader = PluginsLoader.new
loader.load_all_plugins

cli = Gena::Cli.new
options = cli.parse_arguments



if options[:cleanup]
  RambaAdapter.cleanup
  exit
end

at_exit do
  puts 'Cleaning up..'
  RambaAdapter.cleanup
end

config = Gena::Config.new
config.load_plist_config

if options[:fetch]
  FileUtils.rm_rf File.expand_path(TEMPLATES_SYSTEM_FOLDER)
  FileUtils.mkdir_p File.expand_path(TEMPLATES_SYSTEM_FOLDER)
  command = "git clone --depth 1 #{config.config['templates_url']} #{TEMPLATES_SYSTEM_FOLDER}"
  exec command
end

template = Gena::BaseTemplate.new_from_options(options, config)

unless template.class.generamba?
  template.run
  exit
end

ramba_adapter = RambaAdapter.new(template, config)
ramba_adapter.create_rambafile
ramba_adapter.regenerate_default_template

cli_command = ramba_adapter.generamba_gen_command(options)
cli_command << " && #{__FILE__} --cleanup"
cli_command << " && xc-resave #{config.xcode_project_path}"

if options[:verbose]
  puts "#{cli_command}"
end

exec "#{cli_command}"