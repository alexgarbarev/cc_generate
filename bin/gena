#!/usr/bin/env ruby

require 'gena'

unless system "which xc-resave >> /dev/null"
  raise "\nPlease install xc-resave utility first. Run: \n\nbrew install alexgarbarev/core/xc-resave\n\n"
end

TEMPLATES_PROJECT_FOLDER = File.expand_path('Templates')
TEMPLATES_SYSTEM_FOLDER = File.expand_path('~/.gena/templates')

# Include all template code files

registered = []
Dir["#{TEMPLATES_PROJECT_FOLDER}/**/*.rb", "#{TEMPLATES_SYSTEM_FOLDER}/**/*.rb"].each do |file|
  template_name = file.split(File::SEPARATOR)[-2]
  unless registered.include? template_name
    registered << template_name
    require file
  end
end

cli = GenerateCli.new
options = cli.parse_arguments

def cleanup
  ramba_adapter = RambaAdapter.new(nil, nil)
  ramba_adapter.delete_default_template
  ramba_adapter.delete_rambafile
end

if options[:cleanup]
  cleanup
  exit
end

at_exit do
  puts 'Cleaning up..'
  cleanup
end

config = Generate::Config.new
config.load_plist_config

if options[:fetch]
  FileUtils.rm_rf File.expand_path(TEMPLATES_SYSTEM_FOLDER)
  FileUtils.mkdir_p File.expand_path(TEMPLATES_SYSTEM_FOLDER)
  command = "git clone --depth 1 #{config.config['templates_url']} #{TEMPLATES_SYSTEM_FOLDER}"
  exec command
end

template = Generate::BaseTemplate.new_from_options(options, config)

unless template.class.generamba?
  template.run
  exit
end

ramba_adapter = RambaAdapter.new(template, config)
ramba_adapter.create_rambafile
ramba_adapter.regenerate_default_template

cli_command = ramba_adapter.generamba_gen_command(options)
cli_command << " && #{__FILE__} --cleanup"
cli_command << " && xc-resave #{config.xcode_project_path}"

if options[:verbose]
  puts "#{cli_command}"
end

exec "#{cli_command}"